// Generated by gencpp from file dr_ped/Obiettivo.msg
// DO NOT EDIT!


#ifndef DR_PED_MESSAGE_OBIETTIVO_H
#define DR_PED_MESSAGE_OBIETTIVO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dr_ped
{
template <class ContainerAllocator>
struct Obiettivo_
{
  typedef Obiettivo_<ContainerAllocator> Type;

  Obiettivo_()
    : sender(0)
    , x(0.0)
    , y(0.0)
    , theta(0.0)  {
    }
  Obiettivo_(const ContainerAllocator& _alloc)
    : sender(0)
    , x(0.0)
    , y(0.0)
    , theta(0.0)  {
  (void)_alloc;
    }



   typedef int64_t _sender_type;
  _sender_type sender;

   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;

   typedef float _theta_type;
  _theta_type theta;





  typedef boost::shared_ptr< ::dr_ped::Obiettivo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dr_ped::Obiettivo_<ContainerAllocator> const> ConstPtr;

}; // struct Obiettivo_

typedef ::dr_ped::Obiettivo_<std::allocator<void> > Obiettivo;

typedef boost::shared_ptr< ::dr_ped::Obiettivo > ObiettivoPtr;
typedef boost::shared_ptr< ::dr_ped::Obiettivo const> ObiettivoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dr_ped::Obiettivo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dr_ped::Obiettivo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dr_ped::Obiettivo_<ContainerAllocator1> & lhs, const ::dr_ped::Obiettivo_<ContainerAllocator2> & rhs)
{
  return lhs.sender == rhs.sender &&
    lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.theta == rhs.theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dr_ped::Obiettivo_<ContainerAllocator1> & lhs, const ::dr_ped::Obiettivo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dr_ped

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::dr_ped::Obiettivo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dr_ped::Obiettivo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dr_ped::Obiettivo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dr_ped::Obiettivo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dr_ped::Obiettivo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dr_ped::Obiettivo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dr_ped::Obiettivo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9f1847b7934a339de1227b8e056f487a";
  }

  static const char* value(const ::dr_ped::Obiettivo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9f1847b7934a339dULL;
  static const uint64_t static_value2 = 0xe1227b8e056f487aULL;
};

template<class ContainerAllocator>
struct DataType< ::dr_ped::Obiettivo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dr_ped/Obiettivo";
  }

  static const char* value(const ::dr_ped::Obiettivo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dr_ped::Obiettivo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 sender\n"
"float32 x\n"
"float32 y\n"
"float32 theta\n"
"\n"
;
  }

  static const char* value(const ::dr_ped::Obiettivo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dr_ped::Obiettivo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.sender);
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Obiettivo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dr_ped::Obiettivo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dr_ped::Obiettivo_<ContainerAllocator>& v)
  {
    s << indent << "sender: ";
    Printer<int64_t>::stream(s, indent + "  ", v.sender);
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DR_PED_MESSAGE_OBIETTIVO_H
